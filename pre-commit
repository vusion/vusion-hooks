#!/usr/bin/env node

const fs = require('fs');
const shell = require('shelljs');

function gitReadd(filesString) {
    shell.exec('git add ' + filesString);
}

function lint(type, files) {
    if (!fs.existsSync(`.${type}rc`))
        return;

    const typeUpper = type === 'eslint' ? 'ESLint' : 'StyleLint';
    const filesCount = files.length;
    // Linting nonexistent files is now a fatal error in eslint@5.x
    const filesString = files.filter((file) => fs.existsSync(file)).map((file) => `'${file}'`).join(' ');

    shell.echo(`${typeUpper}ing ${filesCount} files`);

    if (!fs.existsSync(`node_modules/.bin/${type}`)) {
        shell.echo('\t\033[41mPlease install ' + typeUpper + '\033[0m (npm i -D ${type})\n');
        shell.exit(1);
    }

    const { code, stdout, stderr } = shell.exec(`node node_modules/.bin/${type} --fix ${filesString}  --color`, { silent: false });
    if (!code) {
        gitReadd(filesString);
        shell.echo('\n\033[0m\033[42m' + typeUpper + ' SUCCEEDED\033[0m\n');
    } else {
        shell.echo('\n\033[0m\033[41m' + typeUpper + ' FAILED:\033[0m Fix ' + type + ' errors and try again\n');
        shell.exit(1);
    }
}

{
    const { code, stdout, stderr } = shell.exec(`git diff --cached --name-only | grep -E '\.(js|vue)$'`, { silent: true });
    if (!code) {
        const files = stdout.trim().split('\n');
        lint('eslint', files);
    }

}

{
    const { code, stdout, stderr } = shell.exec(`git diff --cached --name-only | grep -E '\.(css|vue)$'`, { silent: true });
    if (!code) {
        const files = stdout.trim().split('\n');
        lint('stylelint', files);
    }
}
